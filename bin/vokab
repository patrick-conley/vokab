#!/usr/bin/perl

# Use declarations {{{1
use strict;
use warnings;
use English qw/ -no-match-vars /;
use utf8;
use 5.012;

use Log::Handler 'vokab';
use PConley::Log::Setup;
use Data::Dumper;
local $Data::Dumper::Indent = 0;
local $Data::Dumper::Varname = '';
local $Data::Dumper::Terse = 1;
local $Data::Dumper::Pad = " ";

use Cwd;
use Getopt::Long;
use Pod::Usage;
use Gtk2 -init;

# Cwd::abs_path should return ~/Docu/proj/curr/vokab/bin/vokab or similar
# I want ~/Docu/proj/curr/vokab
my $Source_Path;
BEGIN { $Source_Path = Cwd::abs_path(__FILE__) =~ s!/[^/]*/[^/]*$!!r; }

use lib "$Source_Path/lib";
use Vokab::Add;

# Global variables {{{1

my $Log = undef;                     # Log::Handler object
my $Database_Name = "data/deutsch.db"; # Local path to the DB
my $Database = "$Source_Path/$Database_Name";

# }}}1

# Read & process the command line {{{
my $Log_verbosity = 0;

GetOptions(
   "help"       => sub { pod2usage(1) }, # Print help/man message and abort
   "man"        => sub { pod2usage(-exitstatus => 0, -verbose=> 2) },
   "verbose+"   => \$Log_verbosity,
   "quiet"      => sub { $Log_verbosity = -1 },
   "database=s" => \$Database,
) || pod2usage(2);

# Set up the logger
$Log = PConley::Log::Setup::log_setup(
   Log::Handler->create_logger("vokab"), verbosity => $Log_verbosity );
$Log->debug( "Command-line arguments:" );
$Log->debug( "   " . "--verbose "x$Log_verbosity ) if ( $Log_verbosity > 0 );
$Log->debug( "   " . "--database=" . $Database );
$Log->debug( "   " . "@ARGV" ) if ( @ARGV );

# }}}

# Main {{{

# Set an error handler for Gtk
Glib->install_exception_handler( \&Vokab::UI::handle_ui_exceptions );

if ( @ARGV == 0 )
{
   $Log->error( "Haven't written quiz behaviour yet" );
}
elsif ( $ARGV[0] eq "add" )
{
   Vokab::Add::run( $Database );
}
else
{
   $Log->error( "Unknown argument $ARGV[0]" );
}

# }}}

$Log->notice( "All done. Bye." );

__END__

{{{ POD

=head1 NAME

vokab: A study tool for German vocabulary, using weighted (random?) selection
of words.

=head1 INSTALLATION

Installation is simple, but picky. Clone the repository with

  git clone git@github.com:patrick-conley/vokab.git

and run the program C<vokab/bin/vokab> The executable may be I<symlinked>
elsewhere for convenience.

=head2 DEPENDENCIES

This program depends on the following Perl packages from CPAN:

  Log::Handler
  Params::Validate
  Moose
  Moose::Util::TypeConstraints
  MooseX::FollowPBP
  MooseX::Types
  namespace::autoclean
  Getopt::Long
  Pod::Usage
  Gtk2
  List::Compare
  Data::Dumper
  DBI
  DBD::SQLite
  TAP::Harness (for `make test`)
  Test::Most (for `make test`)
  File::Temp (for `make test`)

along with the module C<PConley::Log::Setup>, from
L<https://github.com/patrick-conley/Log-Handler-setup>.

=head1 DESCRIPTION

The German department has a website students can use to practise translating
English words to German. It's flawed in a great number of ways, most notably
by using a static list of words to translate, which is repeated in the same
order on every run: run a chapter more than a few times and you end up simply
memorizing the order of the words, not learning them.

Vokab is an attempt to do better. When the program is launched, several words
with the highest scores are displayed in English, and the user must enter
their German translations. If the German is incorrect, the correct translation
is shown. The score is computed based on the Wilson score; the selection
criteria are described in detail in the internals docs: doc/word-selection.md

=head1 SYNOPSIS

vokab [--help] [--verbose|quiet] [options] [add]

 Options:
   --help      print a brief help message and quit
   --man       print the full program description and quit
   --verbose   use verbose logging (give twice for more detail)
   --quiet     silence all log output
   --database  name of the database to use (relative to the package's root)

 Arguments:
   add         Enter new words into the database
